services:
  otuspracticum:
    container_name: otuspracticum_app
    image: ${DOCKER_REGISTRY-}otuspracticum:latest
    build:
      context: .
      dockerfile: OtusPracticum/Dockerfile
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    networks:
      - app-network
    depends_on:
      - postgres_db
      - redis_cache
      - kafka_queue
      - chat_service_postgres_master
    restart: always

  otuspracticum_cache_warmup:
    container_name: otuspracticum_cache_warmup
    image: ${DOCKER_REGISTRY-}otuspracticum_cache_warmup:latest
    build:
      context: .
      dockerfile: OtusPracticum.Ð¡acheWarmup/Dockerfile
    networks:
      - app-network
    depends_on:
      - postgres_db
      - redis_cache

  user_service_feed_client:
    container_name: user_service_feed_client
    image: ${DOCKER_REGISTRY-}user_service_feed_client:latest
    build:
      context: .
      dockerfile: OtusPracticum.FeedClient/Dockerfile
    networks:
      - app-network
    depends_on:
      - live_feed_service
      - otuspracticum

  otuspracticum_cache_update_service:
    container_name: otuspracticum_cache_update_service
    image: ${DOCKER_REGISTRY-}otuspracticum_cache_update_service:latest
    build:
      context: .
      dockerfile: OtusPracticum.CacheUpdateService/Dockerfile
    networks:
      - app-network
    depends_on:
      - postgres_db
      - postgres_slave_first
      - postgres_slave_second
      - redis_cache
      - kafka_queue
      - live_feed_service
      - otuspracticum
    restart: always

  live_feed_service:
    container_name: live_feed_service
    image: ${DOCKER_REGISTRY-}live_feed_service:latest
    build:
      context: .
      dockerfile: OtusPracticum.LiveFeedService/Dockerfile
    ports:
      - "5002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    networks:
      - app-network
    restart: always

  postgres_db:
    container_name: otuspracticum_postgres
    image: postgres:latest
    command: -c 'max_connections=1000'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 8fSnWajO5G
      POSTGRES_DB: otuspracticum
    ports:
      - "5432:5432"
    networks: 
      - app-network
    volumes:
      - ./volumes/pgmaster:/var/lib/postgressql/data
    restart: always
  postgres_slave_first:
    container_name: otuspracticum_postgres_slave_first
    image: postgres:latest
    command: -c 'max_connections=1000'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 8fSnWajO5G
      POSTGRES_DB: otuspracticum
    ports:
      - "5431:5432"
    networks: 
      - app-network
    volumes:
      - ./volumes/pgslave:/var/lib/postgresql/data
    restart: always
  postgres_slave_second:
    container_name: otuspracticum_postgres_slave_second
    image: postgres:latest
    command: -c 'max_connections=1000'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 8fSnWajO5G
      POSTGRES_DB: otuspracticum
    ports:
      - "5430:5432"
    networks: 
      - app-network
    volumes:
      - ./volumes/pgslave_sec:/var/lib/postgresql/data
    restart: always

  redis_cache:
    image: redis:7.4.0
    container_name: otuspracticum_redis_cache
    ports:
      - "6379:6379"
    volumes:
      - ./volumes/redisdata:/data
    networks:
      - app-network
    restart: always

  kafka_zookeeper:
    image: confluentinc/cp-zookeeper:7.8.0
    container_name: otuspracticum_kafka_zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
    ports:
      - 22181:2181
    restart: always
  kafka_queue:
    image: confluentinc/cp-kafka:7.8.0
    container_name: otuspracticum_kafka_queue
    depends_on:
      - kafka_zookeeper
    networks:
      - app-network
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: kafka_zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_queue:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    restart: always
  kafka_ui:
    image: provectuslabs/kafka-ui
    container_name: otuspracticum_kafka_ui
    networks:
      - app-network
    ports:
      - 8090:8080
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka_queue:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=kafka_zookeeper:2181
    restart: always

  chat_service_postgres_master:
    container_name: chat_service_postgres_master
    image: "citusdata/citus:12.1.3"
    ports: 
        - "5434:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 6CUaOWXWSV
      POSTGRES_DB: chatdb
    volumes:
      - ./volumes/pgchatsmaster:/var/lib/postgresql/data
    networks:
      - app-network
  chat_service_postgres_worker:
    container_name: chat_service_postgres_worker
    image: "citusdata/citus:12.1.3"
    ports: 
      - "5435:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 6CUaOWXWSV
      POSTGRES_DB: chatdb
    volumes:
      - ./volumes/pgchatsworker:/var/lib/postgresql/data  
    networks:
      - app-network
  chat_service_postgres_worker2:
    container_name: chat_service_postgres_worker2
    image: "citusdata/citus:12.1.3"
    ports: 
      - "5436:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 6CUaOWXWSV
      POSTGRES_DB: chatdb
    volumes:
      - ./volumes/pgchatsworker2:/var/lib/postgresql/data  
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
